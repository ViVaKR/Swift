# Swift

## 일반사항

```text


/*

 String(format:)의 형식 지정자
 ===============================
 %@     String 타입 (객체 설명)
 %d     정수, Int
 %f     부동소수점 (Double, Float)
 %ld    64비트 정수 Int64
 %x,%X  16진수 정수 Int
 ===============================

 */

/*
 [ 클로우저 ]
 - 이름 없는 함수, 익명함수
 1. 전역함수
 2. 중첩함수
 3. 익명 클로저 : 주로 사용

 [ 기본문법 ]
 { (매개변수 목록) -> 반환타입 in
    실행코드
 }
 1. 매개변수 목록 : (매개변수: 타입, ...) 형식
 2. -> 반환타입 : 반환값이 있을 경우 명시
 3. in 키워드 : 매개변수와 실행 코드의 경계를 구분

 let greet: (String) -> String = { (name: String) -> String in
    return "Hello, \(name)!"
 }

 // 타입추론
 let greet = { name in
    return "Hello, \(name)!"
 }

 print(greet("Swift")) // Hello, Swift!

 // 반환 타입 추론
 let add = { (a: Int, b: Int) in
    a + b
 }

 축약 인수 이름의 동작 원리
 •    $0: 클로저의 첫 번째 매개변수를 의미.
 •    $1: 클로저의 두 번째 매개변수를 의미.
 •    $2: 클로저의 세 번째 매개변수를 의미.
 •    … 그 이상도 동일한 방식으로 동작합니다.

 --> Swift의 map은 시퀀스의 각 요소를 변환하여 새로운 시퀀스를 생성하는 강력한 고차 함수입니다.
     C#의 Select와 매우 유사하며, 다양한 변환 작업에서 활용됩니다.
     특히 코드의 간결성과 가독성을 높이는 데 유용합니다.

 --> map
    1. 시퀀스의 각 요소를 변환
    2. 클로저를 전달 ({ $0 * $0 })
    3. 항상 새로운 컬렉션을 반환

 --> filter
    1. 조건에 맞는 요소만 선택
    2. 조건을 만족하는 새로운 컬렉션

 --> reduce
    1. 모든 요소를 결합하여 단일 결과 생성
    2. 단일 값

 --> flatMap
    1. 중첩된 배열을 평면화
    2. 평면화된 배열
 */

```


-- ORM 선호도의 순서

선호도는 프로젝트의 요구사항, 커뮤니티의 크기, 프레임워크의 안정성 등에 따라 달라질 수 있습니다. 대체로 다음과 같은 순서로 선호됩니다:
	1.	Vapor
	•	가장 인기 있는 Swift 웹 프레임워크로, 커뮤니티와 문서가 잘 갖춰져 있어 매우 선호됩니다. 성능과 기능, 확장성 측면에서 잘 설계되어 있어 다양한 프로젝트에 적합합니다.
	2.	Kitura
	•	IBM에서 개발하고 지원하는 프레임워크로, 안정적이고 잘 설계되어 있지만, Vapor보다는 상대적으로 사용자가 적습니다. IBM 클라우드와의 통합이 강점입니다.
	3.	Perfect
	•	성능이 뛰어나고 유연하지만, 커뮤니티와 문서화가 상대적으로 부족하여 일반적인 사용에는 Vapor보다는 덜 선호됩니다. 하지만 고성능의 네트워크 서버나 데이터베이스 연동이 중요한 프로젝트에서는 유리할 수 있습니다.
	4.	SwiftNIO
	•	프레임워크라기보다는 네트워크 라이브러리로, 매우 낮은 수준에서의 제어가 가능합니다. 고성능의 네트워크 애플리케이션을 개발할 수 있지만, 직접 사용하기에는 더 많은 시간이 필요하고 복잡할 수 있습니다. 이는 커스텀 서버를 구현하려는 고급 사용자들에게 적합합니다.
